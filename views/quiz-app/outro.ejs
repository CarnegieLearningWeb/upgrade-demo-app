<!DOCTYPE html>
<html lang="en-US">

<head>
    <title>QuizApp - Outro</title>
    <meta charset=utf-8 />
    <meta name="description" content="UpGrade Demo App" />
    <meta name="keywords" content="UpGrade, Demo, App" />
    <meta name="viewport" content="user-scalable=no, width=device-width, initial-scale=1.0, minimum-scale=0.75, maximum-scale=0.75" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700,800&amp;lang=en" />
    <link rel="stylesheet" href="/css/universal.css" />
    <link rel="stylesheet" href="/css/modal.css" />
    <link rel="stylesheet" href="/css/quiz-app/outro.css" />
    <script src="https://cdn.jsdelivr.net/npm/upgrade_client_lib@5.0.12/dist/browser/index.js"></script>
    <script src="/js/upgrade-client-lib.js"></script>
    <script src="/js/fetch-wrapper.js"></script>
    <script src="/js/log-handler.js"></script>
    <script src="/js/modal.js"></script>
</head>

<body>
    <div id="wrapper">
        <div id="main">
            <div id="text-wrapper">
                <p class="message"><%= message.feedback %></p>
                <p class="message"><%= message.result %></p>
            </div>
            <div id="image-wrapper">
                <img id="outro-image" src="/asset/image/outro-image.png" alt="Outro Image">
            </div>
            <div id="button-wrapper">
                <button id="logout-button" type="submit"><i class="fa fa-graduation-cap fa-lg"></i>Log out</button>
            </div>
        </div>
    </div>
    <script>
        window.addEventListener("load", () => {
            // Logout Button
            const logoutButton = document.getElementById("logout-button");
            let isLoading = false;
            logoutButton.addEventListener("click", async () => {
                try {
                    if (isLoading) {
                        return;
                    }
                    isLoading = true;

                    // UpGrade Metrics Setup (Note: Need a documentation and maybe a better way to add/post metrics)
                    /* 
                    How to add metrics in UpGrade: Profile -> Metrics -> Add Metrics (add each data one by one)
                    1. First add this
                    {
                        "metric": "durationSeconds",
                        "datatype": "continuous"
                    }
                    2. And then this
                    {
                        "metric": "percentCorrect",
                        "datatype": "continuous"
                    }
                    3. And then add these metrics to the experiment you want to monitor
                    */

                    // Create UpgradeClient
                    const studentId = "<%= session.student._id %>";
                    const hostUrl = "<%= upgradeHostUrl %>";
                    const context = "<%= upgradeContext %>";
                    const upClient = new UpgradeClient(studentId, hostUrl, context);

                    // Get the current session and post metrics to UpGrade
                    const metrics = [{
                        timestamp: new Date().toISOString(), // Note: Do we need to require this from the user?
                        metrics: {
                            attributes: {
                                durationSeconds: Number("<%= session.durationSeconds %>"),
                                percentCorrect: Number("<%= session.numCorrect / session.numAnswered * 100 %>")
                            }
                        }
                    }];
                    await LogHandler.info("Posting metrics to UpGrade...");
                    await upClient.log(metrics); // Note: Why does the log() function require an array? Any use cases?
                    await LogHandler.info("<%= session.student.name %> logged out");

                    // Redirect to the login page
                    window.location.href = "/quiz-app/student/login";
                } catch (error) {
                    const modal = new Modal();
                    modal.confirm("quiz-app", `Error: ${error.status}`, error.message, ["OK"], () => {
                        window.top.location.href = "/login";
                    });
                }
            });

            // Focus Logout Button
            logoutButton.focus();
        });
    </script>
</body>

</html>